# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:
- job: 'EvalChanges'
  displayName: 'Analyze changed files to determine which job to run'
  pool:
    vmImage: 'macOS-10.13'
  steps:
  # We want to enforce the following rules for PRs:
  # * if all modifications are to README.md
  #     no testing is needed
  # * if there are modifications to docs/* or to any code
  #     then docs need to be built to verify consistency
  # * if there are modifications to notebooks/* or to any code
  #     then notebooks need to be run to verify consistency
  # * for any code changes (or changes to metadata files)
  #     linting and testing should be run
  # For a PR build, HEAD will be the merge commit, and we want to diff against the base branch,
  #  which will be the first parent: HEAD^ 
  # (For non-PR changes, we will always perform all CI tasks)
  - powershell: |
      if ($env:BUILD_REASON -eq 'PullRequest') {
        $editedFiles = git diff HEAD^ --name-only
        $editedFiles # echo edited files to enable easier debugging
        $codeChanges = $false
        $docChanges = $false
        $nbChanges = $false
        $changeType = "none"
        foreach ($file in $editedFiles) {
          switch -Wildcard ($file) {
            "README.md" { Continue }
            "prototypes/*" { Continue }
            "doc/*" { $docChanges = $true; Continue }
            "notebooks/*" { $nbChanges = $true; Continue }
            default { $codeChanges = $true; Continue }
          }
        }
      }
      Write-Host "##vso[task.setvariable variable=buildDocs;isOutput=true]$(($env:BUILD_REASON -ne 'PullRequest') -or ($docChanges -or $codeChanges))"
      Write-Host "##vso[task.setvariable variable=buildNbs;isOutput=true]$(($env:BUILD_REASON -ne 'PullRequest') -or ($nbChanges -or $codeChanges))"
      Write-Host "##vso[task.setvariable variable=testCode;isOutput=true]$(($env:BUILD_REASON -ne 'PullRequest') -or $codeChanges)"
    name: output
    displayName: 'Determine type of code change'

- job: 'Docs'
  displayName: 'Build documentation'  
  dependsOn: 'EvalChanges'
  condition: eq(dependencies.EvalChanges.outputs['output.buildDocs'], 'True')
  pool: 
    vmImage: 'ubuntu-16.04'
  variables:
    python.version: '3.6'
  steps:
  - template: azure-pipelines-steps.yml
    parameters:
      body:
        - script: 'sudo apt-get -yq install graphviz'
          displayName: 'Install graphviz'

        - script: 'pip install sklearn-contrib-lightning'
          displayName: 'Install lightning'

        - script: 'python setup.py build_sphinx -W'
          displayName: 'Build documentation'

        - publish: 'build/sphinx/html'
          artifact: 'Documentation'
          displayName: 'Publish documentation as artifact'

        - script: 'python setup.py build_sphinx -b doctest'
          displayName: 'Run doctests'

- job: 'Notebooks'
  dependsOn: 'EvalChanges'
  condition: eq(dependencies.EvalChanges.outputs['output.buildNbs'], 'True')
  variables:
    python.version: '3.6'
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - template: azure-pipelines-steps.yml
    parameters:
      body:
        - script: 'pip install shap'
          displayName: 'Install shap'

        - script: 'python setup.py pytest'
          displayName: 'Unit tests'
          env:
            PYTEST_ADDOPTS: '-m "notebook"'

        - task: PublishTestResults@2
          displayName: 'Publish Test Results **/test-results.xml'
          inputs:
            testResultsFiles: '**/test-results.xml'
            testRunTitle: 'Notebooks'
          condition: succeededOrFailed()

- job: 'Linting'
  dependsOn: 'EvalChanges'
  condition: eq(dependencies.EvalChanges.outputs['output.testCode'], 'True')
  variables:
    python.version: '3.6'
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - template: azure-pipelines-steps.yml
    parameters:
      body:
        - script: 'pip install pycodestyle && pycodestyle econml'
          failOnStderr: true
          displayName: Linting

- job: 'Tests'
  dependsOn: 'EvalChanges'
  condition: eq(dependencies.EvalChanges.outputs['output.testCode'], 'True')
  strategy:
    matrix:
      Linux, Python 3.5:
        imageName: 'ubuntu-16.04'
        python.version: '3.5'
      macOS, Python 3.5:
        imageName: 'macOS-10.13'
        python.version: '3.5'
      Windows, Python 3.5:
        imageName: 'vs2017-win2016'
        python.version: '3.5'
      Linux, Python 3.6:
        imageName: 'ubuntu-16.04'
        python.version: '3.6'
      macOS, Python 3.6:
        imageName: 'macOS-10.13'
        python.version: '3.6'
      Windows, Python 3.6:
        imageName: 'vs2017-win2016'
        python.version: '3.6'
      Linux, Python 3.7:
        imageName: 'ubuntu-16.04'
        python.version: '3.7'
      macOS, Python 3.7:
        imageName: 'macOS-10.13'
        python.version: '3.7'
      Windows, Python 3.7:
        imageName: 'vs2017-win2016'
        python.version: '3.7'

  pool:
    vmImage: $(imageName)

  displayName: 'Run tests '

  steps:
  - template: azure-pipelines-steps.yml
    parameters:
      body:
        - task: AzurePowershell@4
          displayName: 'Unit tests'
          inputs:
            azureSubscription: 'automl'
            azurePowerShellVersion: 'latestVersion'
            scriptType: 'inlineScript'
            inline: |
              $env:SUBSCRIPTION_ID = (Get-AzContext).Subscription.Id
              python setup.py pytest
          env:
            WORKSPACE_NAME: 'testWorkspace'
            WORKSPACE_REGION: 'Central US' 
            RESOURCE_GROUP: 'testingAutoMLEconML'
            PYTEST_ADDOPTS: '-m "not notebook"'
            COVERAGE_PROCESS_START: 'setup.cfg'

        - task: PublishTestResults@2
          displayName: 'Publish Test Results **/test-results.xml'
          inputs:
            testResultsFiles: '**/test-results.xml'
            testRunTitle: 'Python $(python.version), image $(imageName)'
          condition: succeededOrFailed()

        - task: PublishCodeCoverageResults@1
          displayName: 'Publish Code Coverage Results'
          inputs:
            codeCoverageTool: Cobertura
            summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
